plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'io.toolebox.git-versioner' version '1.6.5'
  id 'com.diffplug.spotless' version '5.11.0'
}

group 'com.testingsyndicate'

dependencies {
  api 'org.apache.httpcomponents:httpclient:4.5'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
  testImplementation 'org.assertj:assertj-core:3.19.0'
  testImplementation 'org.mockito:mockito-core:3.8.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

repositories {
  mavenCentral()
}

java {
  withJavadocJar()
  withSourcesJar()
}

test {
  useJUnitPlatform()
}

spotless {
  java {
    googleJavaFormat()
    endWithNewline()
  }
  groovyGradle {
    greclipse()
    indentWithSpaces(2)
    endWithNewline()
  }
}

versioner {
  startFrom {
    major = 3
  }
}

publishing {
  repositories {
    maven {
      url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      credentials {
        username = findProperty('publishUsername')
        password = findProperty('publishPassword')
      }
    }
  }
  publications {
    mavenJava(MavenPublication) {
      from components.java
      pom {
        name = 'HC-JMX'
        description = 'Expose PoolingHttpClientConnectionManager statistics via JMX'
        url = 'https://github.com/goughy000/hc-jmx'
        licenses {
          license {
            name = 'MIT License'
            url = 'https://opensource.org/licenses/MIT'
          }
        }
        developers {
          developer {
            name = 'Jack Gough'
            organization = 'Testing Syndicate'
            organizationUrl = 'https://testingsyndicate.com/'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/goughy000/hc-jmx.git'
          developerConnection = 'scm:git:git://github.com/goughy000/hc-jmx.git'
          url = 'https://github.com/goughy000/hc-jmx.git'
        }
      }
    }
  }
}

signing {
  useInMemoryPgpKeys(decode(findProperty('signingKey')), '')
  sign publishing.publications.mavenJava
}

def decode(encoded) {
  new String(Base64.getDecoder().decode(encoded ?: ''))
}
